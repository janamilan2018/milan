AWSTemplateFormatVersion: "2010-09-09"
Description: This templete is used for create 1 VPC, 2 Subnets, 2 Route Table, IGW, NATGateway, 2 EC2 Instance

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "VPCCIDR"
        Parameters:
          - VpcCIDR
      -
        Label:
          default: "Subnets"
        Parameters:
          - PublicSubnetCIDR
          - PrivateSubnetCIDR
      # -
      #   Label:
      #     default: "EC2InstanceType"
      #   Parameters: 
      #     - PublicInstanceType
      #     - PrivateInstanceType
      -
        Label:
          default: "SSH CIDR"
        Parameters: 
          - SSHLocation
      # -
      #   Label:
      #     default: "Export VPC Stack Name"
      #   Parameters:
      #     - ExportVpcStackName
      -
        Label:
          default: "EC2 Instance"
        Parameters:
          - AmazonImageID
          - InstanceType
          - KeyName

Parameters:
  VpcCIDR:
    Default: 10.0.0.0/26
    Description: Please enter the IP range for the VPC
    Type: String

  PublicSubnetCIDR:
    Default: 10.0.0.16/28
    Description: Please enter the IP range for the public subnet
    Type: String

  PrivateSubnetCIDR:
    Default: 10.0.0.32/28
    Description: Please enter the range for the private subnet
    Type: String

  SSHLocation:
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: The IP address range that can be used to access the web server using SSH.
    MaxLength: '18'
    MinLength: '9'
    Type: String

  # ExportVpcStackName:
  #   Description: The name of the vpc stack that exports values
  #   Type: String

  EC2InstanceType:
    Type: String
    Default: t2.micro
    Description: WebServer EC2 instance type
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
    ConstraintDescription: Must be a valid EC2 Instance type

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    ConstraintDescription: Must be the name of an existing EC2 KeyPair
  
  # AmazonImageId:
  #   Description: The ID of the amazon machine image(AMI)
    # Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    # Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags: 
        - Key: Name
          Value: MyVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags: 
        - Key: Name
          Value: MyIGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: Public Subnet
      VpcId: !Ref VPC

  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      Tags: 
        - Key: Name
          Value: Public Subnet Route Table
      VpcId: !Ref VPC

  PublicSubnetRoute:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicSubnetRouteTable

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnet

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnetCIDR
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: Private Subnet
      VpcId: !Ref VPC

  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP/HTTPs access on port 80/443
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ALB Security Group
      VpcId: !Ref VPC

  SSHSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SSH Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
      Tags:
        - Key: Name
          Value: SSH Security Group
      VpcId: !Ref VPC

  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP/HTTPs access on port 80/443 locked down to the load
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref SSHSecurityGroup
      Tags:
        - Key: Name
          Value: WebServer Security Group
      VpcId: !Ref VPC

  PublicEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref EC2InstanceType
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds: 
        - !Ref WebServerSecurityGroup
      KeyName: !Ref KeyName
      ImageId: ami-0b7546e839d7ace12
      Tags:
        - Key: Name
          Value: EC2 Public Insrance
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            sudo yum update -y
            sudo yum install -y httpd.x86_64
            sudo systemctl start httpd.service
            systemctl enable httpd.service
            echo "<html><h1>Hello from AWS Cloud Formation</h1></html> /var/www/html/index.html"

  PrivateEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref EC2InstanceType
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds: 
        - !Ref WebServerSecurityGroup
      KeyName: !Ref KeyName
      ImageId: ami-0b7546e839d7ace12
      Tags:
        - Key: Name
          Value: EC2 Private Instance

Outputs:
  VPC:
    Description: VPC ID
    Export:
      Name: !Sub ${AWS::StackName}-VPC
    Value: !Ref VPC

  PublicSubnet:
    Description: PublicSubnet ID
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet
    Value: !Ref PublicSubnet

  PrivateSubnet:
    Description: PrivateSubnet ID
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet
    Value: !Ref PrivateSubnet

  ALBSecurityGroup:
    Description: ALBSecurityGroup ID
    Export:
      Name: !Sub ${AWS::StackName}-ALBSecurityGroup
    Value: !Ref ALBSecurityGroup

  SShSecurityGroup:
    Description: SSHSecurityGroup ID
    Export:
      Name: !Sub ${AWS::StackName}-SSHSecurityGroup
    Value: !Ref SSHSecurityGroup

  WebServerSecurityGroup:
    Description: WebServerSecurityGroup ID
    Export:
      Name: !Sub ${AWS::StackName}-WebServerSecurityGroup
    Value: !Ref WebServerSecurityGroup

  PublicEC2Instance:
    Description:  PublicEC2Instance ID
    Export:
      Name: !Sub ${AWS::StackName}-PublicEC2Instance
    Value:  !Ref  PublicEC2Instance

  PrivateEC2Instance:
    Description:  PrivateEC2Instance ID
    Export:
      Name: !Sub ${AWS::StackName}-PrivateEC2Instance
    Value:  !Ref  PrivateEC2Instance
    